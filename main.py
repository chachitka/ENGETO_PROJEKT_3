"""
projekt_3.py: T≈ôet√≠ projekt do Engeto Online Python Akademie
autor: Lenka Krƒçm√°rikov√°
email: l.krcmarikova@seznam.cz
discord: lenka_34840
"""

# Standardn√≠ knihovny
import csv
import json
import logging
import os
import sys
import time
import xml.etree.ElementTree as ET
from logging.handlers import RotatingFileHandler
from typing import List, TypedDict

# Knihovny t≈ôet√≠ch stran
from bs4 import BeautifulSoup
import requests
from requests.exceptions import RequestException, Timeout
from tqdm import tqdm
from colorama import Fore, init

# Inicializace colorama
init(autoreset=True)

BASE_URL = "https://www.volby.cz/pls/ps2017nss/"

SEPARATOR = "=" * 79

class Okrsek(TypedDict):
    url: str
    cislo_obce: str
    nazev_obce: str

class Strana(TypedDict):
    strana: str
    hlasy: int

class ObecData(TypedDict):
    obec: str
    volici: int
    vydane_obalky: int
    platne_hlasy: int
    strany: List[Strana]

# Definov√°n√≠ vlastn√≠ch v√Ωjimek
class ValidationError(Exception):
    """Vlastn√≠ v√Ωjimka pro chyby validace."""
    pass

class NoDataFoundError(Exception):
    """
    Vlastn√≠ v√Ωjimka pro p≈ô√≠pad, kdy nejsou nalezena ≈æ√°dn√° data.
    """
    pass

class DataParsingError(Exception):
    """
    Vlastn√≠ v√Ωjimka pro chyby p≈ôi parsov√°n√≠ dat.
    """
    pass

class FileSavingError(Exception):
    """
    Vlastn√≠ v√Ωjimka pro chyby p≈ôi ukl√°d√°n√≠.
    """
    pass

class UnsupportedFormatError(Exception):
    """
    Vlastn√≠ v√Ωjimka pro chyby p≈ôi zad√°v√°n√≠ typu form√°tu souboru.
    """
    pass

# Zpr√°vy pro u≈æivatele
MSG_CRITICAL = """
    üö® KRITICK√Å NEOƒåEK√ÅVAN√Å CHYBA:
    Bƒõhem zpracov√°n√≠ dat nastala kritick√° a neoƒçek√°van√° chyba: 
    {error_detail}
    Program bude ukonƒçen. 
    Pros√≠m, zkontroluj log soubor pro detailn√≠ informace.
"""

MSG_ERROR_ARGUMENTS_COUNT = """
    ‚ùå CHYBA P≈òI SPU≈†TƒöN√ç:
    Oƒçek√°v√°m dva argumenty: URL okresu a n√°zev v√Ωstupn√≠ho souboru.
    
    Spr√°vn√© pou≈æit√≠:
    python {script_name} <URL_okresu> <vystupni_soubor.csv/json/xml>
    
    P≈ô√≠klad:
    python volby_scraper.py "https://www.volby.cz/..." "vysledky.csv"
"""
MSG_ERROR_REQUEST_FAILED = """
    ‚ùå CHYBA P≈òI Z√çSK√ÅV√ÅN√ç SEZNAMU OBC√ç:
    Nepoda≈ôilo se st√°hnout data ze str√°nky: {url}
    Detail chyby: {error_detail}
    
    Zkontroluj pros√≠m sv√© p≈ôipojen√≠ k internetu a zadanou URL.
"""
MSG_ERROR_SAVE_FAILED = """
    ‚ùå CHYBA P≈òI UKL√ÅD√ÅN√ç SOUBORU '{filename}':
    Nepoda≈ôilo se ulo≈æit data do souboru.
    Detail chyby: {error_detail}
    
    Zkontroluj pros√≠m, zda m√°≈° opr√°vnƒõn√≠ k z√°pisu do c√≠lov√©ho um√≠stƒõn√≠ a
    zda soubor nen√≠ pou≈æ√≠v√°n jin√Ωm programem.
"""
MSG_ERROR_UNEXPECTED = """
    ‚ùå NEOƒåEK√ÅVAN√Å CHYBA:
    P≈ôi {operation} nastala neoƒçek√°van√° chyba: {error_detail}
    Kontaktuj pros√≠m v√Ωvoj√°≈ôe s log souborem pro detailn√≠ informace.
"""
MSG_ERROR_UNSUPPORTED_FORMAT = """
    ‚ùå Nepodporovan√Ω form√°t souboru: {format_typ}. Zkontroluj p≈ô√≠ponu.
    Podporovan√© form√°ty: üìã.csv, üìù.json, üî§.xml
"""
MSG_ERROR_URL_VALIDATION = """
    ‚ùå CHYBA P≈òI VALIDACI URL:
    Zadan√° URL '{url}' nen√≠ platn√°.
    Detail chyby: {error_detail}
    
    Ujisti se, ≈æe URL zaƒç√≠n√°
        -> 'http://' nebo 'https://',
        -> obsahuje 'volby.cz' a
        -> je spr√°vn√° pro dan√© volby.
"""

MSG_INFO_COUNT_OBCE = "    üîÑ Celkov√Ω poƒçet obc√≠ ke zpracov√°n√≠: {total}"
MSG_INFO_GETTING_LIST = "    üìã Z√≠sk√°v√°m seznam obc√≠ z adresy..."
MSG_INFO_PROCESSING_DATA = """    
    üîÑ Zpracov√°v√°m volebn√≠ data pro jednotliv√© obce..."""
MSG_INFO_PROCESSING_OBCE = """
Zpracov√°v√°m obec {cislo}/{total}: {obec_nazev} (ƒå√≠slo: {obec_cislo})
"""
MSG_INFO_SAVING = """
    üíæ Ukl√°d√°m v√Ωsledky do souboru '{filename}' ve form√°tu {format}...
"""
MSG_INFO_SUCCESS_SAVE = """
    ‚úÖ HOTOVO! V√Ωsledky byly √∫spƒõ≈°nƒõ ulo≈æeny do '{filename}'.
"""
MSG_INFO_VALIDATION = "    üîç Prob√≠h√° validace URL: {url}"

MSG_STATISTICS = """
    üìä Souhrn zpracov√°n√≠:
       ------------------
       Doba zpracov√°n√≠: {time}
       Zpracov√°no obc√≠: {pocet}
       Poƒçet chyb: {chyby}
       Celkov√Ω poƒçet voliƒç≈Ø: {volici:,}
       Celkov√Ω poƒçet platn√Ωch hlas≈Ø: {hlasy:,}
       Pr≈Ømƒõrn√° volebn√≠ √∫ƒçast: {ucast:.2f}%
"""

MSG_WARNING_NO_DATA_FOUND = """
    ‚ö†Ô∏è VAROV√ÅN√ç: Nebyly nalezeny ≈æ√°dn√© obce ke zpracov√°n√≠!
    Zkontroluj pros√≠m zadanou URL adresu: {url}
"""
MSG_WARNING_NO_DATA_SAVE = """
    ‚ö†Ô∏è VAROV√ÅN√ç:
    Nebyla nalezena ≈æ√°dn√° data k ulo≈æen√≠. Soubor nebude vytvo≈ôen.
"""
MSG_WARNING_PROCESSING_ERROR = """
    ‚ö†Ô∏è VAROV√ÅN√ç:
    Chyba p≈ôi stahov√°n√≠ dat pro obec '{obec_nazev}' ({obec_cislo}).
    Tato obec bude p≈ôeskoƒçena.
    Detail chyby: {error_detail}
"""

# Log zpr√°vy
LOG_CRITICAL = "Kritick√° neoƒçek√°van√° chyba bƒõhem hlavn√≠ho procesu: {error_detail}"
LOG_CRITICAL_UNEXPECTED = """
Kritick√° neoƒçek√°van√° chyba bƒõhem hlavn√≠ho procesu p≈ôi {operation}: {error_detail}
"""

LOG_DEBUG_LOADED_DATA = "Naƒçten√° strana '{strana}', hlasy: '{hlasy}'"
LOG_DEBUG_PROCESSING_OBCE = """
Zpracov√°v√°m obec:
        {obec_nazev}
        ({obec_cislo})
        z URL: {url}
"""
LOG_DEBUG_OBCE_PROCESSED = """
Data pro obec {obec_nazev} ({obec_cislo}) √∫spƒõ≈°nƒõ zpracov√°na.
"""
LOG_DEBUG_SKIP_ROW = "P≈ôeskakuji nevalidn√≠ ≈ô√°dek: '{strana}' ‚Äì '{hlasy}'"

LOG_ERROR_ARGUMENTS_COUNT = "Nespr√°vn√Ω poƒçet argument≈Ø."
LOG_ERROR_BEGIN = "URL mus√≠ zaƒç√≠nat 'http://' nebo 'https://'"
LOG_ERROR_DATA_FAILED = """
Zpracov√°n√≠ dat selhalo kv≈Øli nenalezen√Ωm obc√≠m: {error_detail}"""
LOG_ERROR_DOMENA = "URL mus√≠ b√Ωt z dom√©ny volby.cz"
LOG_ERROR_GETTING_LIST = "Chyba p≈ôi z√≠sk√°v√°n√≠ seznamu obc√≠: {error_detail}"
LOG_ERROR_NO_DATA_FOUND = """
Varov√°n√≠: Nebyl nalezen ≈æ√°dn√Ω odkaz na obce na adrese '{url}'.
"""
LOG_ERROR_PARSING_DATA = "Chyba v datech pro danou obec: {error_detail}"
LOG_ERROR_PARSING_ERROR = """
Chyba p≈ôi parsov√°n√≠ dat pro obec {obec_nazev} ({obec_cislo}): {error_detail}
"""
LOG_ERROR_ROK = "URL mus√≠ obsahovat rok voleb: {rok}"
LOG_ERROR_REQUEST = "Chyba p≈ôi {operation}: {error_detail}"
LOG_ERROR_REQUEST_FAILED = """
Chyba p≈ôi stahov√°n√≠ dat z URL '{url}': {error_detail}
"""
LOG_ERROR_REQUEST_OBCE_FAILED = """
Chyba p≈ôi stahov√°n√≠ dat pro obec {obec_nazev} ({obec_cislo}): {error_detail}
"""
LOG_ERROR_SAVE_FAILED = "Chyba p≈ôi ukl√°d√°n√≠ souboru '{filename}': {error_detail}"
LOG_ERROR_SAVING_FAILED = "Ukl√°d√°n√≠ selhalo kv≈Øli nenalezen√Ωm dat≈Øm."
LOG_ERROR_TIME_OUT = "Vypr≈°el ƒçasov√Ω limit p≈ôi {operation}: {error_detail}"
LOG_ERROR_UNEXPECTED = "Neoƒçek√°van√° chyba p≈ôi {operation}: {error_detail}"
LOG_ERROR_UNEXPECTED_OBCE = """
Neoƒçek√°van√° chyba p≈ôi zpracov√°n√≠ obce {obec_nazev} 
({obec_cislo}): {error_detail}
"""
LOG_ERROR_UNEXPECTED_SAVE = """
Neoƒçek√°van√° chyba p≈ôi ukl√°d√°n√≠ souboru '{filename}': {error_detail}"""
LOG_ERROR_UNSUPPORTED_FORMAT = """
Nepodporovan√Ω form√°t souboru: {format_typ}"""
LOG_ERROR_UNSUPPORTED_FORMAT_FAILED = """
Ukl√°d√°n√≠ souboru selhalo kv≈Øli nepodporovan√©m form√°tu souboru {error_detail}.
"""
LOG_ERROR_URL_VALIDATION = "Neplatn√° URL '{url}': {error_detail} "

LOG_INFO_COUNT_OBCE = "√öspƒõ≈°nƒõ z√≠sk√°n seznam {count} obc√≠."
LOG_INFO_GETTING_OBCE = "Zahajuji z√≠sk√°v√°n√≠ seznamu obc√≠ z URL: {url}"
LOG_INFO_OBCE_PROCESSED = "Zpracov√°n√≠ dat pro obce dokonƒçeno."
LOG_INFO_PROCESSING_OBCE = "Zahajuji zpracov√°n√≠ dat pro jednotliv√© obce."
LOG_INFO_PROCESSING_FINISHED = "Zpracov√°n√≠ dat pro obce dokonƒçeno."
LOG_INFO_PROGRAM_EXIT = """
Program bude ukonƒçen s k√≥dem {exit_code} kv≈Øli kritick√© chybƒõ.
"""
LOG_INFO_SAVE_SUCCESS = "V√Ωsledky √∫spƒõ≈°nƒõ ulo≈æeny do souboru '{filename}'."
LOG_INFO_SAVING = """
Zahahuji ukl√°d√°n√≠ v√Ωsledk≈Ø do souboru '{filename}' ve form√°tu {format}.
"""
LOG_INFO_URL_VALIDATED = "URL '{url}' √∫spƒõ≈°nƒõ validov√°na."

LOG_RAISE_NO_DATA_FOUND = """
Na adrese '{url}' nebyly nalezeny ≈æ√°dn√© odkazy na obce."""

LOG_WARNING_NO_DATA_TO_SAVE = """
Nebyla nalezena ≈æ√°dn√° data k ulo≈æen√≠ do souboru '{filename}'
"""
LOG_WARNING_POKUSY = """
Chyba p≈ôi {operation}: {error_detail} (pokus {current}/{max})
"""
LOG_WARNING_VALUE_HLASY = """
Neplatn√© ƒç√≠slo hlas≈Ø '{hlasy}' pro stranu '{strana}' - p≈ôeskoƒçeno
"""

def nastav_logovani(
    verbose: bool = False,
    log_path: str = 'volby_scraper.log',
    max_log_size: int = 1_048_576,  # 1MB
    backup_count: int = 5
) -> None:
    """
    Nastav√≠ logov√°n√≠ s rotuj√≠c√≠mi log soubory a v√Ωstupem do konzole.
    Tato funkce nakonfiguruje logov√°n√≠ pro z√°znam 
    informac√≠ do konzole a do souboru. 
    V z√°vislosti na hodnotƒõ parametru 'verbose' nastav√≠
    √∫rove≈à logov√°n√≠ na buƒè DEBUG(pro podrobnƒõj≈°√≠ logy)
    nebo INFO (pro z√°kladn√≠ logy).

    Args:
        verbose (bool): Pokud je True, nastav√≠ podrobn√© logov√°n√≠ (DEBUG).
                        Pokud je False, nastav√≠ logov√°n√≠ na z√°kladn√≠
                        √∫rove≈à (INFO). V√Ωchoz√≠ hodnota je False.
        log_path (str): Cesta k log souboru (adres√°≈ô/jm√©no souboru).
                        V√Ωchoz√≠ je 'logs/volby_scraper.log'.
        max_log_size (int): Maxim√°ln√≠ velikost log souboru p≈ôed rotac√≠
                            (v bajtech). V√Ωchoz√≠ je 1 MB.
        backup_count (int): Poƒçet z√°lo≈æn√≠ch soubor≈Ø.
                            Uchov√° 5 star√Ωch log soubor≈Ø.
    
    Returns:
        None: Funkce nevrac√≠ ≈æ√°dnou hodnotu p≈ôi √∫spƒõchu.
    
    Example:
        # M≈Ø≈æe≈° zadat libovolnou cestu k log souboru, nap≈ô√≠klad:
    >>> nastav_logovani(verbose=True, log_path='logs/volby_scraper.log')
        # Testovac√≠ zpr√°vy
        logging.info("Toto je info zpr√°va.")
        logging.debug("Toto je debug zpr√°va.") 
    """
    # Nastaven√≠ √∫rovnƒõ logov√°n√≠
    log_level = logging.DEBUG if verbose else logging.INFO

    # Zkontroluj, jestli je t≈ôeba vytvo≈ôit adres√°≈ô
    dir_name = os.path.dirname(log_path)
    if dir_name:  # pokud je dir_name pr√°zdn√Ω, nevytv√°≈ôej nic
        os.makedirs(dir_name, exist_ok=True)

    # Vytvo≈ôen√≠ rotuj√≠c√≠ho handleru pro soubor
    file_handler = RotatingFileHandler(
        log_path,
        maxBytes=max_log_size,
        backupCount=backup_count,
        encoding='utf-8'
    )
    file_formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s: %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    file_handler.setFormatter(file_formatter)

    # Vytvo≈ôen√≠ konzolov√©ho handleru
    console_handler = logging.StreamHandler(sys.stdout)
    console_formatter = logging.Formatter(
        '%(levelname)s: %(message)s'
    )
    console_handler.setFormatter(console_formatter)

    # Z√≠sk√°n√≠ hlavn√≠ho loggeru a jeho konfigurace
    logger = logging.getLogger()
    logger.setLevel(log_level)
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
def validuj_url(url: str, rok_voleb: str = None) -> None:
    # Vr√°t√≠ None p≈ôi √∫spƒõchu
    """
    Ovƒõ≈ôuje validitu zadan√© URL adresy a p≈ô√≠padnƒõ kontroluje,
    zda obsahuje po≈æadovan√Ω rok voleb.
    Funkce prov√°d√≠ nƒõkolik kontrol na zadan√© URL:
    1. zda URL zaƒç√≠n√° protokolem 'http://' nebo 'https://',
    2. zda URL pat≈ô√≠ dom√©nƒõ 'volby.cz',
    3. pokud je zad√°n rok voleb, zkontroluje, 
       zda se teto rok v URL nach√°z√≠,
    4. ovƒõ≈ôuje dostupnost URL proveden√≠m HTTP GET po≈æadavku.
    Pokud jak√°koliv kontrola sel≈æe, vyvol√° v√Ωjimku 'ValidationError'.

    Args:
        url(str): URL adresa k ovƒõ≈ôen√≠
        
        rok_voleb(str, optional): ≈ôetƒõzec, kter√Ω m√° b√Ωt p≈ô√≠tomen 
                                   v URL (nap≈ô. 'ps2017', 'ps2021')
                                  Pokud nen√≠ zad√°n, kontrola 
                                  na tento rok se p≈ôeskoƒç√≠.
    
    Returns:
        None: Funkce nevrac√≠ ≈æ√°dnou hodnotu p≈ôi √∫spƒõchu.

    Raises:
        ValidationError: Pokud URL neprojde jednou z kontrol
                         (nap≈ô. nespr√°vn√Ω protokol, 
                         ≈°patn√° dom√©na, chybƒõj√≠c√≠ rok voleb)
        
        RequestException: Pokud dojde k chybƒõ p≈ôi HTTP po≈æadavku
                          (nap≈ô. neexistuj√≠c√≠ dom√©na, 
                          ≈°patn√© p≈ôipojen√≠, server nedopov√≠d√°)

    Example:
            #√∫spƒõ≈°n√© ovƒõ≈ôen√≠
        >>> validuj_url("https://www.volby.czu/ps2021", "ps2021")
            #vyvol√° ValidationError, proto≈æe rok 2022 nen√≠ v URL
        >>> validuj_url("https://www.volby.czu/ps2021", "ps2022")
    """
    
    if not url.lower().startswith(('http://', 'https://')):
        logging.error(LOG_ERROR_BEGIN)
        raise ValidationError(
            LOG_ERROR_BEGIN
        )
    
    if 'volby.cz' not in url.lower():
        logging.error(LOG_ERROR_DOMENA)
        raise ValidationError(
            LOG_ERROR_DOMENA
        )
    
    if rok_voleb and rok_voleb not in url:
        logging.error(LOG_ERROR_ROK.format(rok=rok_voleb))
        raise ValidationError(
            LOG_ERROR_ROK.format(rok=rok_voleb)
        )
    
    try:
        # Zkus√≠me udƒõlat GET request pro ovƒõ≈ôen√≠ dostupnosti
        response = requests.get(url, timeout=5)
        # Vr√°t√≠ chybu (nap≈ô. 404, 500), je≈æ se zachyt√≠ v ƒç√°sti except
        response.raise_for_status()
    
    except requests.exceptions.RequestException as e:
        # Zde je pot≈ôeba pouze 1 pokus
        zpracuj_vyjimku(e, 0, 1, "ovƒõ≈ôov√°n√≠ URL")

def parsuj_html(content: str) -> BeautifulSoup:
    """
    Parsuje HTML obsah a vrac√≠ objekt BeautifulSoup
    pro snadnou manipulaci a extraci dat.
    Fukce p≈ôev√°d√≠ vstupn√≠ HTML k√≥d na BeautifulSoup objekt,
    kter√Ω umo≈æ≈àuje snadnou navigaci a extrakci informac√≠ 
    z HTML dokumentu.
    Tento objekt lze pou≈æ√≠t k vyhled√°v√°n√≠ element≈Ø,
    z√≠sk√°v√°n√≠ textov√©ho obsahu nebo atribut≈Ø HTML tag≈Ø.

    Args:
        content(str): HTML obsah str√°nky ve formƒõ ≈ôetƒõzce (string)
    
    Returns:
        BeautifulSoup: Objekt reprezentuj√≠c√≠ parsovan√Ω HTML dokument,
                       umo≈æ≈àuj√≠c√≠ snadnou manipulaci s jeho obsahem
    Example:
        >>> html_content = "<html> +
                            <head> +
                            <title>Testov√° str√°nka</title> +
                            </head> +
                            <body><h1>V√≠tejte!</h1></body> +
                            </html>"
        >>> soup = parsuj_html(html_content)
        >>> print(soup.title.string)
            Testov√° str√°nka
        >>> print(soup.h1.text)
            V√≠tejte!

    Note:
        Funce vy≈æaduje knihovnu 'BeautifulSoup', kter√° 
        je souƒç√°st√≠ bal√≠ƒçku 'beautifulsoup4'. 
        Pokud nen√≠ nainstalov√°na, je t≈ôeba ji nainstalovat 
        pomoc√≠ 'pip install beautifulsoup'.
    """
       
    return BeautifulSoup(content, 'html.parser')


def stahni_data(url: str, max_pokusu: int = 3) -> requests.Response:
    """
    Stahuje data z URL adresy s mo≈ænost√≠ nƒõkolika pokus≈Ø v p≈ô√≠padƒõ chyby.
    Funkce se pokus√≠ st√°hnout data z uveden√© URL adresy.
    V p≈ô√≠padƒõ, ≈æe dojde k chybƒõ p≈ôi po≈æadavku
    (nap≈ô. probl√©my se s√≠≈•ov√Ωm p≈ôipojen√≠m, server neodpov√≠d√°
    nebo vrac√≠ chybu), funkce se pokus√≠ po≈æadavek zopakovat
    a≈æ 'max_pokusu' kr√°t.
    Pokud v≈°echny pokusy sel≈æou, funkce vyvol√° chybu.

    Args:
        url(str): URL adresa str√°nky, ze kter√© se maj√≠ st√°hnout data
        
        max_pokusu(int, optional): Maxim√°ln√≠ poƒçet pokus≈Ø o sta≈æen√≠ dat.
                                   V√Ωchoz√≠ hodnota jsou 3 pokusy.
    
    Returns:
        requests.Response: Objekt odpovƒõdi (Response), kter√Ω
                           obsahuje sta≈æen√° data z URL adresy

    Raises:
        RequestException: Pokud dojde k chybƒõ
                          bƒõhem v≈°ech pokus≈Ø o sta≈æen√≠
    
    Example:
        >>> import requests
        >>> url = "https://www.volby.cz/pls/ps2017nss/" +
                  "ps32?xjazyk=CZ&xkraj=14&xnumnuts=8103"
        >>> response = stahni_data(url)
        >>> data = response.text 
            #Z√≠sk√°m textov√Ω obsah sta≈æen√© str√°nky

    Note:
        Funkce pou≈æ√≠v√° knihovnu 'requests'.
        Pokud nen√≠ nainstalov√°na, je t≈ôeba ji nainstalovat
        pomoc√≠ 'pip install requests'
    """
    
    for pokus in range(max_pokusu):
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            return response
        
        except requests.exceptions.RequestException as e:
            zpracuj_vyjimku(e, pokus, max_pokusu, "stahov√°n√≠ dat")
            time.sleep(2) # Poƒçkej p≈ôed dal≈°√≠m pokusem


def zpracuj_vyjimku(
    e: Exception, pokus: int, max_pokusu: int, operace: str
) -> None:
    """
    Zpracov√°v√° v√Ωjimky p≈ôi vykon√°v√°n√≠ operace a loguje chyby
    podle typu v√Ωjimky. Pokud je poƒçet pokus≈Ø men≈°√≠ ne≈æ
    'max_pokusu', vyp√≠≈°e varov√°n√≠ a pokraƒçuje v pokusu.
    P≈ôi dosa≈æen√≠ poƒçtu 'max_pokusu' nebo p≈ôi vypr≈°en√≠ 
    ƒçasov√©ho limitu vyvol√° v√Ωjimku.
    
    Args:
        e(Exception): V√Ωjimka, kter√° byla vyvol√°na bƒõhem operace
        
        pokus(int): Po≈ôad√≠ aktu√°ln√≠ho pokusu (0-indexov√°no)
        
        max_pokusu(int): Maxim√°ln√≠ poƒçet pokus≈Ø, kter√© se maj√≠
                         prov√©st
        operace(str): Popis operace, kter√° vedla k v√Ωjimce
                      (nap≈ô. n√°zev akce, akce API)

    Returns:
        None: Funkce nevrac√≠ ≈æ√°dnou hodnotu p≈ôi √∫spƒõchu.
    
    Raises:
        ValidationError: Pokud vypr≈°el datov√Ω limit nebo pokud
                         do≈°lo k jin√© kritick√© chybƒõ
    """
    
    if isinstance(e, requests.exceptions.Timeout):
        logging.error(
            LOG_ERROR_TIME_OUT.format(operation=operace, error_detail=e)
        )
        raise ValidationError(
            LOG_ERROR_TIME_OUT.format(operation=operace, error_detail=e)
        ) from e
    
    elif isinstance(e, requests.RequestException):
        logging.error(
            LOG_ERROR_REQUEST.format(operation=operace, error_detail=e)
        )       
        if pokus == max_pokusu - 1: # Posledn√≠ pokus
            raise
        logging.warning(
            LOG_WARNING_POKUSY.format(
                operation=operace,
                error_detail=e,
                current=pokus + 1,
                max=max_pokusu
            )
        )


def ziskej_linky_okrsku(
    url: str, max_pokusu: int = 3
) -> List[Okrsek]:
    """
    Z√≠sk√°v√° seznam URL adres jednotliv√Ωch okrsk≈Ø 
    z dan√© vstupn√≠ str√°nky.
    Funkce st√°hne obsah zadan√© URL a pomoc√≠ BeautifulSoup 
    parsuje HTML, aby z√≠skala URL adresy jednotliv√Ωch okrsk≈Ø,
    kter√© jsou n√°slednƒõ vr√°ceny v seznamu slovn√≠k≈Ø.
    Ka≈æd√Ω slovn√≠k obsahuje informace o jednom okrsku,
    vƒçetnƒõ URL adresy okrsku, ƒç√≠sla obce a n√°zvu obce.

    Args:
        url(str): URL adresa str√°nky, ze kter√© se z√≠sk√°vaj√≠ ¬®
                  URL adresy okrsk≈Ø
        max_pokusu(int, optional): Maxim√°ln√≠ poƒçet pokus≈Ø o sta≈æen√≠ dat.
                                   V√Ωchoz√≠ hodnota jsou 3 pokusy.
    
    Returns:
        list[dict]: Seznam slovn√≠k≈Ø (Okrsek), kde ka≈æd√Ω obsahuje:
        - 'url'(str): URl adresa okrsku,
        - 'cislo_obce'(str): ƒå√≠slo obce,
        - 'nazev_obce'(str): N√°zev obce.

    Example:
        >>> url = "https://www.volby.cz/pls/ps2017nss/" +
                  "ps32?xjazyk=CZ&xkraj=14&xnumnuts=8103"
        >>> okrsky = ziskej_linky_okrsku(url)
        >>> okrsky[0]

    Note:
        Funkce p≈ôedpokl√°d√°, ≈æe v≈°echny odkazy v HTML 
        odpovƒõdi jsou ve form√°tu 'ps311' a obsahuj√≠ 
        parametry s ƒç√≠slem obce.
        Pokud se struktura str√°nky zmƒõn√≠, m≈Ø≈æe b√Ωt nutn√© 
        upravit selektory.
    """
    
    unique_urls = set()
    obce: List[Okrsek] = []

    response = stahni_data(url, max_pokusu)
    soup = parsuj_html(response.text)   

    for row in soup.select('table tr'):
        link = row.select_one('td:nth-child(1) a[href*="ps311"]')
        if link:
            href = link.get('href')
            full_url = BASE_URL + href
            if full_url not in unique_urls:
                unique_urls.add(full_url)
                cislo_obce = href.split('xobec=')[1].split('&')[0]
                nazev_obce_cell = row.select_one('td.overflow_name')
                nazev_obce = (
                    nazev_obce_cell.text.strip()
                    if nazev_obce_cell
                    else None
                )
                obce.append(
                    Okrsek(
                        url=full_url,
                        cislo_obce=cislo_obce,
                        nazev_obce=nazev_obce
                    )
                )
            
    return obce
        

def ziskej_data_obce(url: str, max_pokusu: int = 3) -> ObecData:
    """
    Z√≠sk√°v√° detailn√≠ volebn√≠ data pro konkr√©tn√≠ obce z dan√© URL.
    Funkce st√°hne obsah zadan√© URL a pomoc√≠ BeautifulSoup 
    parsuje HTML, aby z√≠skala detailn√≠ volebn√≠ v√Ωsledky 
    pro konkr√©tn√≠ obec.
    V√Ωsledky jsou vr√°ceny ve formƒõ slovn√≠ku (ObecData), kter√Ω
    obsahuje informace o obci, poƒçtech voliƒç≈Ø, vydan√Ωch ob√°lk√°ch,
    platn√Ωch hlasech a v√Ωsledc√≠ch jednotliv√Ωch politick√Ωch stran.

    Args:
        url(str): URL adresa str√°nky obsahuj√≠c√≠
                  volebn√≠ data pro konkr√©tn√≠ obec.
        max_pokusu(int, optional): Maxim√°ln√≠ poƒçet pokus≈Ø 
                                   o st√°hnut√≠ str√°nky.
                                   V√Ωchoz√≠ hodnota je 3.

    Returns:
        ObecData: Slovn√≠k s volebn√≠mi data pro danou obec, 
                  kter√Ω obsahuje:
        - 'obec'(str): N√°zev obce,
        - 'volici'(str): Poƒçet registrovan√Ωch voliƒç≈Ø,
        - 'vydane_obalky'(int): Poƒçet vydan√Ωch volebn√≠ch ob√°lek,
        - 'platne_hlasy'(int): Poƒçet platn√Ωch hlas≈Ø,
        - 'strany'(List[Strana]): Seznam politick√Ωch stran
                                  a poƒçtu hlas≈Ø pro ka≈ædou stranu.

    Raises:
        DataParsingError: Pokud dojde k chybƒõ p≈ôi parsov√°n√≠ dat.
        
        ValueError: Pokud nen√≠ mo≈æn√© text p≈ôev√©st na ƒç√≠slo
            (nap≈ô√≠klad pokud obsahuje jin√© ne≈æ ƒç√≠seln√© znaky)
    
    
    Examples:
         >>> url = "https://www.volby.cz/pls/ps2017nss/"
         >>> data = ziskej_data_obce(url)
         >>> print(data)
             {'obec': 'Albrechtice',
              'volici': 3173,
              'vydane_obalky': 1957,
              'platne_hlasy': 1944,             
              'strany': [{'strana': 'Obƒçansk√° demokratick√° strana',
                          'hlasy': 109},
                         {'strana': '≈ò√°d n√°roda - Vlasteneck√° unie',
                          'hlasy': 4},
                         {'strana': 'CESTA ODPOVƒöDN√â SPOLEƒåNOSTI',
                          'hlasy': 2},
                          ...
               ]
             }
    
    Note:
        Funkce p≈ôedpokl√°d√°, ≈æe str√°nka obsahuje 
        specifick√© HTML elementy pro jednotliv√© √∫daje.
        P≈ôi zpracov√°n√≠ poƒçtu hlas≈Ø pro strany je 
        poƒç√≠t√°no s t√≠m, ≈æe hlasy jsou uvedeny v textov√© 
        podobƒõ bez ƒç√°rky. 
        Pokud jsou data obce podez≈ôel√°, zachyt√≠ je v√Ωjimka 
        a zaloguje jako chybu pro danou obec.
    """
    
    response = stahni_data(url, max_pokusu)
    soup = parsuj_html(response.text)
    
    # Najdi n√°zev obce
    obec_text = najdi_text_nebo_chybu(
        soup, 'h3:-soup-contains("Obec:")', "n√°zev obce"
    )
    jmeno_obce = obec_text.replace("Obec:", "").strip()
    
    # Najdi poƒçet voliƒç≈Ø
    volici_text = najdi_text_nebo_chybu(
        soup, 'td[headers="sa2"]', "poƒçet voliƒç≈Ø"
    )
    volici = ocisti_cislo(volici_text)
    
    # Najdi poƒçet vydan√Ωch ob√°lek
    vydane_text = najdi_text_nebo_chybu(
        soup, 'td[headers="sa3"]', "poƒçet vydan√Ωch ob√°lek"
    )
    vydane_obalky = ocisti_cislo(vydane_text)
    
    # Najdi poƒçet platn√Ωch hlas≈Ø
    platne_text = najdi_text_nebo_chybu(
        soup, 'td[headers="sa6"]', "poƒçet platn√Ωch hlas≈Ø"
    )
    platne_hlasy = ocisti_cislo(platne_text)
    
    # Najdi strany a poƒçet hlas≈Ø
    strany_data: List[Strana] = []
    for table in soup.select('table')[1:]:
        for row in table.select('tr:nth-child(n+3)'):
            cells = row.select('td')
            if len(cells) >= 3:
                strana = cells[1].text.strip()
                hlasy_text = cells[2].text.strip()
                logging.debug(
                    LOG_DEBUG_LOADED_DATA.format(
                        strana=strana, 
                        hlasy=hlasy_text
                    )
                )
                # Zkontrolujeme, zda m√°me platn√Ω ≈ô√°dek
                if not je_validni_radek(strana, hlasy_text):
                    logging.debug(
                        LOG_DEBUG_SKIP_ROW.format(
                            strana=strana, hlasy=hlasy_text
                        )
                    )
                    continue  # P≈ôeskoƒç tento ≈ô√°dek

                try:
                    hlasy = ocisti_cislo(hlasy_text)                    
                    strany_data.append(Strana(strana=strana, hlasy=hlasy))
                
                except ValueError:
                    logging.warning(
                        LOG_WARNING_VALUE_HLASY.format(
                            hlasy=hlasy_text, strana=strana
                        )
                    )
                    continue # P≈ôeskoƒç tento ≈ô√°dek
                
                except DataParsingError as e:
                    logging.error(
                        LOG_ERROR_PARSING_DATA.format(error_detail=e)
                    )
                    raise               
                                  
    return (
        ObecData(obec=jmeno_obce,
        volici=volici,
        vydane_obalky=vydane_obalky,
        platne_hlasy=platne_hlasy,
        strany=strany_data)
    )



def najdi_text_nebo_chybu(
    soup: BeautifulSoup, selector: str, popis: str
) -> str:
    """
    Najde textov√Ω obsah HTML elementu podle CSS selektoru, 
    nebo vyvol√° v√Ωjimku, pokud dan√Ω element neexistuje.
    Tato pomocn√° funkce slou≈æ√≠ ke spolehliv√©mu z√≠sk√°n√≠ 
    textov√Ωch dat z HTML pomoc√≠ knihovny BeautifulSoup. 
    Pokud nen√≠ po≈æadovan√Ω element nalezen, zaloguje 
    chybovou zpr√°vu a vyvol√° v√Ωjimku typu DataParsingError.

    Args:
        soup (BeautifulSoup): Objekt BeautifulSoup, kter√Ω 
                              reprezentuje HTML dokument.
        selector (str): CSS selektor pro vyhled√°n√≠ 
                        po≈æadovan√©ho elementu.
        popis (str): Popis hledan√©ho prvku 
                     (pou≈æ√≠v√° se pro logov√°n√≠ chyb).

    Returns:
        str: Textov√Ω obsah nalezen√©ho elementu se zbaven√≠m 
             poƒç√°teƒçn√≠ch a koncov√Ωch mezer.

    Raises:
        DataParsingError: Pokud nen√≠ element v HTML nalezen.

    Example:
        >>> from bs4 import BeautifulSoup
        >>> html = "<html><body> + 
                    <h3>Obec: Albrechtice</h3> +
                    </body></html>"
        >>> soup = BeautifulSoup(html, 'html.parser')
        >>> najdi_text_nebo_chybu(soup, 'h3', 'n√°zev obce')
        'Obec: Albrechtice'

    Note:
        Tato funkce se pou≈æ√≠v√° zejm√©na p≈ôi extrakci 
        √∫daj≈Ø jako je n√°zev obce, poƒçet voliƒç≈Ø atd., 
        a zaji≈°≈•uje, ≈æe v p≈ô√≠padƒõ ne√∫spƒõchu bude chyba
        zachycena a pops√°na.
    """
    
    element = soup.select_one(selector)
    
    if element is None:
        logging.error(f"Nepoda≈ôilo se naj√≠t element: {popis}")
        raise DataParsingError(f"Chyb√≠ element: {popis}")
    
    return element.text.strip()


def ocisti_cislo(text: str) -> int:
    """
    Oƒçist√≠ ƒç√≠slo od ne≈æ√°douc√≠ch znak≈Ø (nap≈ô. mezery, 
    nerozdƒõliteln√° mezera) a p≈ôevede ho na cel√© ƒç√≠slo.
    Tato pomocn√° funkce p≈ôij√≠m√° textov√Ω ≈ôetƒõzec, kter√Ω 
    m≈Ø≈æe obsahovat mezery nebo speci√°ln√≠ znaky
    (nap≈ô. nerozdƒõliteln√° mezera, kter√° je ƒçasto pou≈æ√≠v√°na
    v HTML pro oddƒõlov√°n√≠ tis√≠c≈Ø) a odstran√≠ tyto znaky.
    Pot√© p≈ôevede upraven√Ω text na cel√© ƒç√≠slo (integer).

    Args:
        text(str): Vstupn√≠ textov√Ω ≈ôetƒõzec, kter√Ω obsahuje 
                   ƒç√≠slo ve form√°tu s ne≈æ√°douc√≠mi znaky.

    Returns:
        int: ƒåist√© ƒç√≠slo (integer), kter√© je v√Ωsledkem
             oƒçi≈°tƒõn√≠ textov√©ho ≈ôetƒõzce.

    Raises:
        ValueError: Pokud nen√≠ mo≈æn√© text p≈ôev√©st na ƒç√≠slo       
                    (nap≈ô√≠klad pokud obsahuje jin√© ne≈æ ƒç√≠seln√© znaky).

    Examples:
        >>> ocisti_cislo('1 234')
            1234
        >>> ocisti_cislo('1\xa0234')
            1234
        >>> ocisti_cislo('5000')
            5000
    """
    return int(text.replace('\xa0', '').replace(' ', ''))


def je_validni_radek(strana:str, hlasy_text: str) -> bool:
    """
    Tato pomocn√° funkce slou≈æ√≠ k ovƒõ≈ôen√≠, zda dan√Ω ≈ô√°dek 
    (nap≈ô√≠klad z nƒõjak√Ωch dat nebo tabulky) je platn√Ω 
    na z√°kladƒõ urƒçit√Ωch krit√©ri√≠. 
    Funkce vrac√≠ True, pokud jsou splnƒõny podm√≠nky:
    - strana nen√≠ rovna "-" 
      ("-" je oznaƒçen√≠ chybƒõj√≠c√≠ch nebo neplatn√Ωch dat)
    - hlasy_text nen√≠ rovno "-", 
    - hlasy_text nen√≠ pr√°zdn√Ω ≈ôetƒõzec "".
    Jinak ≈ôeƒçeno, funkce vr√°t√≠ False, pokud je alespo≈à jedna 
    z tƒõchto hodnot, buƒè "-" nebo pr√°zdn√Ω ≈ôetƒõzec u hlasy_text.
    Funkce kontroluje, zda data nejsou oznaƒçena jako neplatn√° 
    nebo chybƒõj√≠c√≠, a pokud jsou v≈°echna data platn√°, vr√°t√≠ True.
    
    Args:
        strana (str): N√°zev strany 
        hlasy_text (str): Textov√© vyj√°d≈ôen√≠ poƒçtu hlas≈Ø 

    Returns:
        bool:
            - True: pokud vstupn√≠ argumenty nejsou rovny "-" nebo ""
            - False: pokud alespo≈à jedna hodnota ze vstupn√≠ch 
              argument≈Ø je rovna "-" nebo ""
    
    Example:
        >>> je_validni_radek("Obƒçansk√° demokratick√° strana", "153")
        True
        >>> je_validni_radek("-", "45")
        False
        >>> je_validni_radek("Strana zelen√Ωch", "-")
        False
        >>> je_validni_radek("Pir√°tsk√° strana", "")
        False
    """
    return not (strana == "-" or hlasy_text == "-" or hlasy_text == "")
  

def zkontroluj_vstupy() -> tuple[str, str]:
    """
    Zkontroluje spr√°vnost vstupn√≠ch argument≈Ø programu
    (URL adresu okresu a n√°zev v√Ωstupn√≠ho souboru).
    Funkce ovƒõ≈ôuje, ≈æe u≈æivatel poskytl spr√°vn√Ω 
    poƒçet argument≈Ø (2), a ≈æe tyto argumenty obsahuj√≠ 
    URL adresu okresu a n√°zev v√Ωstupn√≠ho souboru. 
    Pokud nen√≠ zadan√Ω spr√°vn√Ω poƒçet argument≈Ø,
    funkce vyp√≠≈°e chybovou zpr√°vu a ukonƒç√≠ program.
    
    Args:
        Argumenty jsou z√≠sk√°v√°ny z 'sys.argv'
        (vstupn√≠ argumenty p≈ô√≠kazov√©ho ≈ô√°dku)
    
    Returns:
        tuple[str, str]: Dvojice obsahuj√≠c√≠:
            - str: URL adresa okresu 
                   (prvn√≠ argument)
            - str: n√°zev v√Ωstupn√≠ho souboru 
                   (druh√Ω argument)

    Raises:
        SystemExit: Pokud nen√≠ zad√°n spr√°vn√Ω poƒçet 
                    argument≈Ø nebo jsou nespr√°vnƒõ form√°tov√°ny,
                    program vyp√≠≈°e chybovou zpr√°vu a 
                    ukonƒç√≠ se s k√≥dem 1.

    Examples:
        import sys
        sys.argv = (
            ['election_scraper.py',
            'https://www.volby.cz/pls/ps2017nss/ +
            ps32?xjazyk=CZ&xkraj=14&xnumnuts=8102',
            'vysledky.csv']
        )
        >>> zkontroluj_vstupy()
            ('https://www.volby.cz/pls/ps2017nss/ +
            ps32?xjazyk=CZ&xkraj=14&xnumnuts=8102',
            'vysledky.csv'
            )

            sys.argv = (
                ['election_scraper.py',
                'https://www.volby.cz/pls/ps2017nss/ +
                ps32?xjazyk=CZ&xkraj=14&xnumnuts=8102'
                ]
            )
        >>> zkontrolu_vstupy()
            Chyba: Mus√≠te zadat dva argumenty -
               URL okresu a n√°zev v√Ωstupn√≠ho souboru.
            Chyba: Nspr√°vn√Ω poƒçet argument≈Ø!
            Pou≈æit√≠: python election_scraper.py
                 <URL_okresu> <vystupni_soubor.csv>
            P≈ô√≠klad: python election_scraper.py
                 "https://volby.cz/..." "vysledky.csv"
            SystemExit: 1
    """    
    
    if len(sys.argv) != 3:
        logging.error(LOG_ERROR_ARGUMENTS_COUNT)
        print("\n" + SEPARATOR)
        print(
            Fore.LIGHTYELLOW_EX + 
            MSG_ERROR_ARGUMENTS_COUNT.format(script_name=sys.argv[0])
        )
        print(SEPARATOR + "\n")
        sys.exit(1)

    url_okresu = sys.argv[1]
    vystupni_soubor = sys.argv[2]
    return url_okresu, vystupni_soubor


def ziskej_obce(url_okresu) -> list[dict]:
    """
    Validuje URL adresu a z√≠sk√°v√° seznam obc√≠ ke zpracov√°n√≠.
    Funkce nejprve validuje zadanou URL adresu okresu, 
    a pokud je platn√°, pokraƒçuje z√≠sk√°n√≠m seznamu obc√≠, 
    kter√© budou d√°le zpracov√°v√°ny.
    Pokud nen√≠ nalezen ≈æ√°dn√Ω odkaz na obce,
    funkce vyp√≠≈°e chybovou hl√°≈°ku a ukonƒç√≠ program.

    Args:
        url_okresu(str): URL adresa okresu, ze kter√©
                         budou z√≠sk√°ny odkazy obce
    Returns:
        list[dict]: Seznam slovn√≠k≈Ø, kde ka≈æd√Ω slovn√≠k 
                    obsahuje informace o obci.
            Ka≈æd√Ω slovn√≠k m√° n√°sleduj√≠c√≠ kl√≠ƒçe:
                - 'url'(str): URL adresa okrsku pro danou obec
                - 'cislo_obce'(str): ƒå√≠slo obce
                - 'nazev_obce'(str): N√°zev obce
    Raises:
        ValidationError: Pokud je URL neplatn√° 
                         (zpracov√°no p≈ô√≠mo zde s sys.exit).
        NoDataFoundError: Vyvol√° (p≈ôed√° d√°l) v√Ωjimnku, pokud
                          funkce ziskej_linky_okrsku 
                          nenajde ≈æ√°dn√© obce.
        requests.exceptions.RequestException: 
                          Zachyt√°v√° chybu p≈ôi stahov√°n√≠ dat
        Exception: Pokud dojde k jak√©koliv neoƒçek√°van√© chybƒõ.
        
    Examples:
        >>> url_okresu = "https://www.volby.cz/pls/ps2017nss/" +
                         "ps32?xjazyk=CZ&xkraj=14&xnumnuts=8103"
        >>> obce = ziskej_obce(url_okresu)
        >>> print(obce)    
            [{'url': 'https://www.volby.cz/pls/ps2017nss/
            ps311?xjazyk=CZ&xkraj=14&xobec=598925&xvyber=8103'},
              'cislo_obce': '598925',
              'nazev_obce': 'Albrechtice'}]

    Note:
        Tato funkce neukonƒçuje program p≈ôi nenalezen√≠ obc√≠.
        Zachyt√°v√° NoDataFoundError a znovu ji vyvol√°v√°.
        ValidationError funkci ukonƒçuje.
    """
    
    print(
        "\n" + Fore.LIGHTCYAN_EX + 
        MSG_INFO_VALIDATION.format(url=url_okresu) + "\n"
    )
    
    try:
        validuj_url(url_okresu)
        logging.info(LOG_INFO_URL_VALIDATED.format(url=url_okresu))
    except ValidationError as e:
        logging.error(
            LOG_ERROR_URL_VALIDATION.format(
                url=url_okresu, error_detail=e
            )
        )
        print("\n" + SEPARATOR)
        print(
            Fore.LIGHTYELLOW_EX + 
            MSG_ERROR_URL_VALIDATION.format(
                url=url_okresu, error_detail=e
            )
        )
        print(SEPARATOR + "\n")
        sys.exit(1)
    
    # Z√≠sk√°n√≠ seznamu obc√≠
    print("\n" + Fore.LIGHTCYAN_EX + MSG_INFO_GETTING_LIST + "\n")
    
    logging.info(LOG_INFO_GETTING_OBCE.format(url=url_okresu))
    try:
        obce = ziskej_linky_okrsku(url_okresu)
        if not obce: # Kontrola, zda se obce opravdu na≈°ly
            raise NoDataFoundError(
                LOG_RAISE_NO_DATA_FOUND.format(url=url_okresu)
            )
        logging.info(LOG_INFO_COUNT_OBCE.format(count=len(obce)))
        return obce
 
    except NoDataFoundError as e:
        # Zde chybu zalogujeme, a pak znovu vyvol√°me, 
        # A zpracujeme v hlavn√≠ funkci
        logging.error(LOG_ERROR_GETTING_LIST.format(error_detail=e))       
        print("\n" + SEPARATOR)
        print(
            Fore.LIGHTYELLOW_EX + 
            MSG_WARNING_NO_DATA_FOUND.format(url=url_okresu)
        )
        print(SEPARATOR + "\n")
        raise #Znovu vyvol√°me zachycenou v√Ωjimku NoDataFoundError
    
    except requests.exceptions.RequestException as e:
        # Zachyt√≠me chybu p≈ôi stahov√°n√≠ v ziskej_linky_okrsku
        logging.error(
            LOG_ERROR_REQUEST_FAILED.format(
            url=url_okresu, error_detail=e
            ), exc_info=True
        ) 
        # exc_info=True pro detailn√≠ Traceback
        print("\n" + SEPARATOR)
        print(
            Fore.LIGHTYELLOW_EX + 
            MSG_ERROR_REQUEST_FAILED.format(
                url=url_okresu, error_detail=e
            )
        )
        print(SEPARATOR + "\n")
        sys.exit(1)
    
    except Exception as e:
        # Tady zachyt√≠me jak√©koli jin√© neƒçekan√© chyby
        logging.error(
            LOG_ERROR_UNEXPECTED.format(
                operation=f"z√≠sk√°v√°n√≠ seznamu obc√≠", error_detail=e
            ), exc_info=True
        )
        print("\n" + SEPARATOR)
        print(
            Fore.LIGHTYELLOW_EX + 
            MSG_ERROR_UNEXPECTED.format(
                operation=f"z√≠sk√°v√°n√≠ seznamu obc√≠", error_detail=e
            )
        )
        print(SEPARATOR + "\n")
        sys.exit(1)
   

def zpracuj_obce(obce) -> tuple[list, dict]:
    """
    Zpracuje seznam obc√≠ a z√≠sk√° volebn√≠ data pro ka≈ædou obec.
    Funkce projde seznam obc√≠, pro ka≈ædou obec st√°hne a
    zpracuje jej√≠ volebn√≠ data, vƒçetnƒõ poƒçtu voliƒç≈Ø, 
    vydan√Ωch ob√°lek, platn√Ωch hlas≈Ø a hlas≈Ø pro 
    jednotliv√© strany.
    Vytvo≈ô√≠ v√Ωstupn√≠ seznam, kter√Ω obsahuje v√Ωsledky 
    pro ka≈ædou obec, a tak√© statistiky o celkov√©m poƒçtu 
    zpracovan√Ωch obc√≠, celkov√©m poƒçtu voliƒç≈Ø a platn√Ωch hlas≈Ø.

    Args:
        obce (list): Seznam slovn√≠k≈Ø, kde ka≈æd√Ω slovn√≠k 
                     obsahuje informace o obci, 
                     vƒçetnƒõ URL adresy a ƒç√≠sla obce.

    Returns:
        tuple: Dvojice, kde:
            - list: Seznam v√Ωsledk≈Ø volebn√≠ch dat pro ka≈ædou obec;
                    ka≈æd√Ω v√Ωsledek obsahuje informace jako 
                    ƒç√≠slo obce, n√°zev obce, voliƒçe, vydan√© ob√°lky, 
                    platn√© hlasy a hlasy pro jednotliv√© strany.
            
            - dict: Statistiky zpracov√°n√≠, obsahuj√≠c√≠:
                - 'zpracovane_obce': Poƒçet zpracovan√Ωch obc√≠
                - 'chyby': Poƒçet chyb p≈ôi zpracov√°n√≠ obc√≠
                - 'celkem_volicu': Celkov√Ω poƒçet voliƒç≈Ø pro v≈°echny
                                   zpracovan√© obce
                - 'celkem_platnych_hlasu': Celkov√Ω poƒçet platn√Ωch hlas≈Ø
                                           pro v≈°echny zpracovan√© obce

    Examples:
        obce = (
            [{'url': 'https://www.volby.cz/pls/ps2021nss/
            ps311?xjazyk=CZ&xkraj=14&xobec=598925',
            'cislo_obce': '598925', 
            'nazev_obce': 'Albrechtice'}, ...
            ]
        )
        >>> vysledky, stats = zpracuj_obce(obce)
        vysledky
        [{'ƒå√≠slo obce': '598925', 'N√°zev obce': 'Albrechtice',
          'Voliƒçi': 3173,'Vydan√© ob√°lky': 1957, 
          'Platn√© hlasy': 1944, 'ANO 2011': 635, ...}, ...
        ]
        stats
        {'zpracovane_obce': 17, 'chyby': 0, 
         'celkem_volicu': 106196,
         'celkem_platnych_hlasu': 106196}
    
    Note:
        Funkce pou≈æ√≠v√° knihovnu 'tqdm'.
        Pokud nen√≠ nainstalov√°na, je t≈ôeba ji nainstalovat
        pomoc√≠ 'pip install tqdm'
    """
    
    vysledky = []
    # P≈ôid√°me statistiky
    stats = {
        'zpracovane_obce': 0,
        'chyby': 0,
        'celkem_volicu': 0,
        'celkem_platnych_hlasu': 0
    }

    print("\n" + Fore.LIGHTCYAN_EX + MSG_INFO_PROCESSING_DATA + "\n")
    logging.info(LOG_INFO_PROCESSING_OBCE)
    
    total_obce = len(obce)
    print(
        "\n" + Fore.LIGHTCYAN_EX + 
        MSG_INFO_COUNT_OBCE.format(total=total_obce) + "\n"
    )
    
    # Zpracov√°n√≠ ka≈æd√© obce s progress barem
    for i, obec in enumerate(
        tqdm(obce, desc="Zpracov√°v√°m obce", unit="obec")
    ):
        obec_nazev = obec['nazev_obce']
        obec_cislo = obec['cislo_obce']
        # V√Ωpis aktu√°ln√≠ obce
        print(
            MSG_INFO_PROCESSING_OBCE.format(
            cislo=i+1, total=total_obce, 
            obec_nazev=obec_nazev, obec_cislo=obec_cislo
            )
        )
        
        try:
            logging.debug(
                LOG_DEBUG_PROCESSING_OBCE.format(
                    obec_nazev=obec_nazev,
                    obec_cislo=obec_cislo,
                    url=obec['url']
                )
            )
            data = ziskej_data_obce(obec['url'])
               
            radek = {
                'ƒå√≠slo obce': obec_cislo,
                'N√°zev obce': data['obec'],
                'Voliƒçi': data['volici'],
                'Vydan√© ob√°lky': data['vydane_obalky'],
                'Platn√© hlasy': data['platne_hlasy']
            }
               
            for strana in data['strany']:
                radek[strana['strana']] = strana['hlasy']
                   
            vysledky.append(radek)

            # Aktualizace statistik
            stats['zpracovane_obce'] += 1
            stats['celkem_volicu'] += data['volici']
            stats['celkem_platnych_hlasu'] += data['platne_hlasy']
            logging.debug(
                LOG_DEBUG_OBCE_PROCESSED.format(
                    obec_nazev=obec_nazev,
                    obec_cislo=obec_cislo
                )   
            )

        except (ValueError, DataParsingError) as e:
            vypis_chybu(
                LOG_ERROR_PARSING_ERROR, obec_nazev, obec_cislo, e
            )
            stats['chyby'] += 1
            continue # Pokraƒçuj na dal≈°√≠ obec
           
        except requests.exceptions.RequestException as e:
            vypis_chybu(
                LOG_ERROR_REQUEST_OBCE_FAILED, obec_nazev, obec_cislo, e
            )
            stats['chyby'] += 1
            continue # Pokraƒçuj na dal≈°√≠ obec
        
        except Exception as e:
            logging.error(
                LOG_ERROR_UNEXPECTED_OBCE.format(
                    obec_nazev=obec_nazev,
                    obec_cislo=obec_cislo,
                    error_detail=e
                ), exc_info=True
            )
            print("\n" + SEPARATOR)
            print(
                Fore.LIGHTYELLOW_EX + MSG_ERROR_UNEXPECTED.format(
                    operation=(
                        f"zpracov√°n√≠ obce {obec_nazev} ({obec_cislo}). "
                        "Tato obec bude p≈ôeskoƒçena."
                    ),
                    error_detail=e
                )
            )
            print(SEPARATOR + "\n")
            stats['chyby'] += 1
            continue # Pokraƒçuj na dal≈°√≠ obec
    
    print("\n")
    logging.info(LOG_INFO_OBCE_PROCESSED)
    return vysledky, stats


def vypis_chybu(
    a: str, 
    obec_nazev: str, 
    obec_cislo: str, chyba: str
) -> None:
    """
    Vyp√≠≈°e do logu a na konzoli chybov√© hl√°≈°en√≠ t√Ωkaj√≠c√≠ se dan√© obce.

    Args:
        a (str): ≈†ablona form√°tovac√≠ho ≈ôetƒõzce 
                 pro logov√°n√≠ chybov√© ud√°losti.
        obec_nazev (str): N√°zev obce.
        obec_cislo (str): ƒå√≠slo obce.
        chyba (str): Podrobnosti o chybƒõ.

    Returns:
        None: Funkce nevrac√≠ ≈æ√°dnou hodnotu p≈ôi √∫spƒõchu.

    Example:
        >>> vypis_chybu(
                LOG_ERROR_PARSING_ERROR, "Praha", "001", 
                "Chyba p≈ôi parsov√°n√≠ dat"
            )
    """
    logging.error(
        a.format(
            obec_nazev=obec_nazev, 
            obec_cislo=obec_cislo, 
            error_detail=chyba
        ), exc_info=True
    )
    
    print("\n" + SEPARATOR)
    print(
        Fore.LIGHTYELLOW_EX + 
        MSG_WARNING_PROCESSING_ERROR.format(
            obec_nazev=obec_nazev, 
            obec_cislo=obec_cislo, 
            error_detail=chyba
        )
    )
    print(SEPARATOR + "\n")


def uloz_soubor(
    vysledky, vystupni_soubor, format_typ, ulozit_funkce
) -> None:
    """
    Ulo≈æ√≠ v√Ωsledky do souboru pomoc√≠ p≈ôedan√© funkce.
    Tato funkce zkontroluje, zda jsou k dispozici v√Ωsledky 
    k ulo≈æen√≠, vyp√≠≈°e informaci o c√≠lov√©m souboru a form√°tu, 
    a pot√© zavol√° p≈ôedanou funkci `ulozit_funkce` k z√°pisu dat.
    V p≈ô√≠padƒõ chyby p≈ôi z√°pisu je zaznamen√°na chyba do logu.

    Args:
        vysledky (any): Data, kter√° maj√≠ b√Ωt ulo≈æena.
                        M≈Ø≈æe to b√Ωt seznam, slovn√≠k nebo jin√Ω datov√Ω typ.
        vystupni_soubor (str): N√°zev souboru, vƒçetnƒõ p≈ô√≠pony,
                               do kter√©ho se maj√≠ v√Ωsledky ulo≈æit.
        format_typ (str): Typ form√°tu (nap≈ô. 'csv', 'json'),
                          kter√Ω urƒçuje form√°t ukl√°d√°n√≠.
        ulozit_funkce (callable): Funkce, kter√° prov√°d√≠ samotn√Ω 
                          z√°pis dat do souboru. Mƒõla by p≈ôijmout 
                          dva argumenty: data a n√°zev souboru.

    Returns:
        None: Funkce nevrac√≠ ≈æ√°dnou hodnotu p≈ôi √∫spƒõchu.

    Raises:
        OSError: Pokud dojde k chybƒõ p≈ôi ukl√°d√°n√≠, je vyhozena
                 v√Ωjimka, kter√° je n√°slednƒõ zachycena a 
                 zpracov√°na v hlavn√≠ funkci

        FileSavingError: Pokud dojde k chybn√©mu ulo≈æen√≠ je
                         vyvol√°na v√Ωjimka
    Note:
        Ujistƒõte se, ≈æe `ulozit_funkce` spr√°vnƒõ pracuje 
        s p≈ôedan√Ωmi daty a souborem.
    """
    
    if not vysledky:
        logging.warning(
            LOG_WARNING_NO_DATA_TO_SAVE.format(filename=vystupni_soubor)
        )
        print("\n" + SEPARATOR)
        print(Fore.LIGHTYELLOW_EX + MSG_WARNING_NO_DATA_SAVE)
        print(SEPARATOR + "\n")
        raise FileSavingError(LOG_ERROR_SAVING_FAILED)
    
    print(
        Fore.LIGHTCYAN_EX + MSG_INFO_SAVING.format(
            filename=vystupni_soubor, format=format_typ.upper()
        )   
    )
    try:
        ulozit_funkce(vysledky, vystupni_soubor)
        print(
            Fore.LIGHTGREEN_EX + 
            MSG_INFO_SUCCESS_SAVE.format(filename=vystupni_soubor)
        )
        logging.info(
            LOG_INFO_SAVE_SUCCESS.format(filename=vystupni_soubor)
        )
    
    except OSError as e:
        logging.error(
            LOG_ERROR_SAVE_FAILED.format(
                filename=vystupni_soubor, error_detail=e
            ), exc_info=True
        )
        print("\n" + SEPARATOR)
        print(
            Fore.LIGHTYELLOW_EX + 
            MSG_ERROR_SAVE_FAILED.format(
                filename=vystupni_soubor, error_detail=e
            )
        )
        print(SEPARATOR + "\n")
        raise FileSavingError(LOG_ERROR_SAVING_FAILED)
    
    except Exception as e:
        logging.error(
            LOG_ERROR_UNEXPECTED.format(
                operation=f"ukl√°d√°n√≠ souboru'{vystupni_soubor}'",
                error_detail=e
            ), exc_info=True
        )
        print("\n" + SEPARATOR)
        print(
            Fore.LIGHTYELLOW_EX + MSG_ERROR_UNEXPECTED.format(
                operation=f"ukl√°d√°n√≠ souboru '{vystupni_soubor}'",
                error_detail=e
            )    
        )
        print(SEPARATOR + "\n")
        raise FileSavingError(LOG_ERROR_SAVING_FAILED)
           


def uloz_vysledky(vysledky, vystupni_soubor) -> None:
    """
    Ukl√°d√° v√Ωsledky do souboru podle zadan√© p≈ô√≠pony (CSV, JSON, XML).
    Funkce rozpozn√° p≈ô√≠ponu souboru z n√°zvu zadan√©ho u≈æivatelem a
    podle n√≠ vybere spr√°vnou metodu pro ulo≈æen√≠ dat.
    Podporovan√© form√°ty jsou CSV, JSON a XML. V p≈ô√≠padƒõ 
    nepodporovan√©ho form√°tu funkce ukonƒç√≠ program s chybovou hl√°≈°kou.

    Args:
        vysledky (list): Seznam slovn√≠k≈Ø obsahuj√≠c√≠ volebn√≠ data,
                         kter√° byla z√≠sk√°na a zpracov√°na
                         funkc√≠ `zpracuj_obce`.
        vystupni_soubor (str): N√°zev souboru, vƒçetnƒõ p≈ô√≠pony,
                               do kter√©ho se maj√≠ v√Ωsledky ulo≈æit.

    Returns:
        None: Funkce nevrac√≠ ≈æ√°dnou hodnotu p≈ôi √∫spƒõchu.

    Raises:
        SystemExit: Pokud je zadan√Ω form√°t souboru nepodporov√°n.

        UnsupportedFormatError: Pokud dojde k zad√°n√≠ nepodorovn√©ho
                    form√°tu souboru, je vyvol√°na v√Ωjimka, kter√°
                    je n√°slednƒõ zachycena a zpracov√°na v hlavn√≠
                    funkci

    Examples:
        vystupni_soubor = "karvina.json"
        uloz_vysledky(vysledky, vystupni_soubor)
        (Tato funkce ulo≈æ√≠ v√Ωsledky do souboru karvina.json.)
        
    Notes:
        Funkce podporuje n√°sleduj√≠c√≠ form√°ty soubor≈Ø:
        - CSV (.csv)
        - JSON (.json)
        - XML (.xml)
    """
    # Automatick√© rozpozn√°n√≠ p≈ô√≠pony
    pripona = vystupni_soubor.split('.')[-1].lower()

    if pripona == 'csv':
        uloz_soubor(vysledky, vystupni_soubor, 'csv', uloz_do_csv)
    elif pripona == 'json':
        uloz_soubor(vysledky, vystupni_soubor, 'json', uloz_do_json)
    elif pripona == 'xml':
        uloz_soubor(vysledky, vystupni_soubor, 'xml', uloz_do_xml)
    else:
        print("\n" + SEPARATOR)
        print(
            Fore.LIGHTYELLOW_EX + 
            MSG_ERROR_UNSUPPORTED_FORMAT.format(format_typ=pripona)
        )
        print(SEPARATOR + "\n")
        raise UnsupportedFormatError(
            LOG_ERROR_UNSUPPORTED_FORMAT.format(format_typ=pripona)
        )
 

def uloz_do_csv(vysledky, vystupni_soubor) -> None:
    """
    Ulo≈æ√≠ volebn√≠ v√Ωsledky do CSV souboru.
    Funkce zpracuje seznam volebn√≠ch v√Ωsledk≈Ø a ulo≈æ√≠ je do CSV souboru.
    Sloupce souboru budou obsahovat z√°kladn√≠ informace o obc√≠ch a
    volebn√≠ch v√Ωsledc√≠ch, vƒçetnƒõ v≈°ech stran a jejich hlas≈Ø,
    kter√© se vyskytuj√≠ v datech.
    Pokud nƒõkter√© v√Ωsledky nemaj√≠ hodnotu pro nƒõkter√Ω sloupec,
    v CSV souboru bude tento sloupec pr√°zdn√Ω.
    Pokud nejsou k dispozici ≈æ√°dn√° data, funkce vyp√≠≈°e chybovou zpr√°vu.

    Args:
        vysledky (list): Seznam slovn√≠k≈Ø obsahuj√≠c√≠ch volebn√≠
                         v√Ωsledky k ulo≈æen√≠.
                         Ka≈æd√Ω slovn√≠k reprezentuje jednu obec
                         s jej√≠mi volebn√≠mi v√Ωsledky.
        vystupni_soubor (str): Cesta k v√Ωstupn√≠mu souboru CSV,
                               kam budou v√Ωsledky ulo≈æeny.

    Returns:
        None: Funkce nevrac√≠ ≈æ√°dnou hodnotu p≈ôi √∫spƒõchu.

    Raises:
        OSError: Pokud dojde k chybƒõ p≈ôi ukl√°d√°n√≠ souboru.
                 Tato v√Ωjimka je v≈°ak pravdƒõpodobnƒõ ji≈æ
                 zachycena a zpracov√°na funkc√≠ 'uloz_soubor'

    Examples:
        vysledky = [
             {
                 "ƒå√≠slo obce": "598925",
                "N√°zev obce": "Albrechtice",
                "Voliƒçi": 3173,
                 "Vydan√© ob√°lky": 1957,
                 "Platn√© hlasy": 1944,
                 "Obƒçansk√° demokratick√° strana": 109,
                 "≈ò√°d n√°roda - Vlasteneck√° unie": 4
             }
         ]
        >>> uloz_do_csv(vysledky, "vysledky.csv")
            (Ulo≈æ√≠ v√Ωsledky voleb do souboru vysledky.csv)

    
    Notes:
        Funkce automaticky p≈ôid√° nov√© sloupce pro v≈°echny strany,
        kter√© se objev√≠ v datech.
        Pokud nƒõjak√Ω v√Ωsledek neobsahuje urƒçit√© sloupce
        (nap≈ô. ƒç√≠slo obce, n√°zvy stran),
        bude tento sloupec v CSV souboru pr√°zdn√Ω.
    """
    
    sloupce = [
        'ƒå√≠slo obce',
        'N√°zev obce',
        'Voliƒçi',
        'Vydan√© ob√°lky',
        'Platn√© hlasy'
    ]
    for vysledek in vysledky:
        for klic in vysledek.keys():
            if klic not in sloupce:
                sloupce.append(klic)
            
    with open(
        vystupni_soubor, 'w', newline='', encoding='utf-8-sig'
    ) as f:
        writer = csv.DictWriter(f, fieldnames=sloupce)
        writer.writeheader()
        writer.writerows(vysledky)
        

def uloz_do_json(vysledky, vystupni_soubor) -> None:
    """
    Ulo≈æ√≠ volebn√≠ v√Ωsledky do JSON souboru.
    Funkce zpracuje seznam volebn√≠ch v√Ωsledk≈Ø a ulo≈æ√≠ je do JSON souboru.
    Ka≈æd√Ω volebn√≠ v√Ωsledek je ulo≈æen jako slovn√≠k, kde
    kl√≠ƒçe p≈ôedstavuj√≠ r≈Øzn√© √∫daje o obc√≠ch a volebn√≠ch stran√°ch,
    a hodnoty p≈ôedstavuj√≠ odpov√≠daj√≠c√≠ data.
    V√Ωsledky jsou ulo≈æen√© v dob≈ôe form√°tovan√©m JSON form√°tu
    pro snadnou ƒçitelnost.

    Args:
        vysledky (list): Seznam slovn√≠k≈Ø obsahuj√≠c√≠ch volebn√≠ v√Ωsledky
                         pro jednotliv√© obce.
        vystupni_soubor (str): Cesta k v√Ωstupn√≠mu souboru JSON,
                               kam budou v√Ωsledky ulo≈æeny.

    Returns:
        None: Funkce nevrac√≠ ≈æ√°dnou hodnotu p≈ôi √∫spƒõchu.

    Raises:
        OSError: Pokud dojde k chybƒõ p≈ôi ukl√°d√°n√≠ souboru.
                 Tato v√Ωjimka je v≈°ak pravdƒõpodobnƒõ ji≈æ
                 zachycena a zpracov√°na funkc√≠ 'uloz_soubor'

    Examples:
        vysledky = [
             {
                 "ƒå√≠slo obce": "598925",
                "N√°zev obce": "Albrechtice",
                "Voliƒçi": 3173,
                 "Vydan√© ob√°lky": 1957,
                 "Platn√© hlasy": 1944,
                 "Obƒçansk√° demokratick√° strana": 109,
                 "≈ò√°d n√°roda - Vlasteneck√° unie": 4
             }
         ]
        >>> uloz_do_json(vysledky, "vysledky.json")
            (Ulo≈æ√≠ v√Ωsledky voleb do souboru vysledky.json)

    
    Notes:
        Funkce pou≈æ√≠v√° form√°tov√°n√≠ s odsazen√≠m (indent=2),
        aby v√Ωstupn√≠ JSON byl p≈ôehledn√Ω a snadno ƒçiteln√Ω.
        Funkce neprov√°d√≠ ≈æ√°dn√© specifick√© validace vstupn√≠ch dat,
        p≈ôedpokl√°d√°, ≈æe `vysledky` obsahuj√≠ seznam slovn√≠k≈Ø
        s volebn√≠mi daty.
    """
    
    with open(vystupni_soubor, 'w', encoding='utf-8') as f:
        json.dump(vysledky, f, ensure_ascii=False, indent=2)
       

def uloz_do_xml(vysledky, vystupni_soubor) -> None:
    """
    Ulo≈æ√≠ volebn√≠ v√Ωsledky do XML souboru.
    Funkce zpracuje seznam volebn√≠ch v√Ωsledk≈Ø a ulo≈æ√≠ je 
    do XML souboru, p≈ôiƒçem≈æ ka≈æd√Ω volebn√≠ v√Ωsledek je zaps√°n 
    jako XML element.
    Ka≈æd√° obec bude reprezentov√°na jako samostatn√Ω XML element
    s pod≈ô√≠zen√Ωmi elementy, kter√© odpov√≠daj√≠ r≈Øzn√Ωm √∫daj≈Øm o obci a
    volebn√≠ch stran√°ch. V√Ωsledky jsou ulo≈æeny v dob≈ôe form√°tovan√©m
    XML form√°tu s deklarac√≠ k√≥dov√°n√≠ UTF-8.

    Args:
        vysledky (list): Seznam slovn√≠k≈Ø obsahuj√≠c√≠ch volebn√≠ v√Ωsledky
                         pro jednotliv√© obce.
        vystupni_soubor (str): Cesta k v√Ωstupn√≠mu XML souboru, kam budou
                               v√Ωsledky ulo≈æeny.

    Returns:
        None: Funkce nevrac√≠ ≈æ√°dnou hodnotu p≈ôi √∫spƒõchu.

    Raises:
        OSError: Pokud dojde k chybƒõ p≈ôi ukl√°d√°n√≠ souboru.
                 Tato v√Ωjimka je v≈°ak pravdƒõpodobnƒõ ji≈æ
                 zachycena a zpracov√°na funkc√≠ 'uloz_soubor'

    Examples:
         vysledky = [
             {
                 "ƒå√≠slo obce": "598925",
                 "N√°zev obce": "Albrechtice",
                 "Voliƒçi": 3173,
                 "Vydan√© ob√°lky": 1957,
                 "Platn√© hlasy": 1944,
                 "Obƒçansk√° demokratick√° strana": 109,
                 "≈ò√°d n√°roda - Vlasteneck√° unie": 4
             }
         ]
        >>> uloz_do_xml(vysledky, "vysledky.xml")
            (Ulo≈æ√≠ v√Ωsledky voleb do souboru vysledky.xml)

    Notes:
        Funkce vytv√°≈ô√≠ XML soubor s deklarac√≠ UTF-8 a p≈ôid√°v√° do nƒõj
        data ve form√°tu, kde ka≈æd√° obec je reprezentov√°na jako
        XML element `<obec>`. Ka≈æd√Ω volebn√≠ √∫daj o obci je zaps√°n jako
        pod≈ô√≠zen√Ω element, nap≈ô. `<ƒå√≠slo obce>`. 
        Funkce pou≈æ√≠v√° form√°tov√°n√≠ s odsazen√≠m ET.indent, aby 
        v√Ωstupn√≠ XML byl p≈ôehledn√Ω; tato funkce je dostupn√° 
        od Pythonu 3.9+. Pokud se pou≈æ√≠v√° star≈°√≠ verze, bude pot≈ôeba 
        odsazen√≠ implementovat ruƒçnƒõ nebo pou≈æ√≠t jin√Ω p≈ô√≠stup.
    """
    
    root = ET.Element('vysledky')
    for vysledek in vysledky:
        obec = ET.SubElement(root, 'obec')
        for klic, hodnota in vysledek.items():
            ET.SubElement(obec, klic).text = str(hodnota)
    strom = ET.ElementTree(root)
    
    # P≈ôid√°me odsazen√≠ 
    ET.indent(strom, space="  ")
    
    # Ulo≈æ strom do souboru
    strom.write(vystupni_soubor, encoding='utf-8', xml_declaration=True)
             

def vypis_statistiky(stats: dict, cas_zacatku: float) -> None:
    """
    Vytvo≈ô√≠ a vyp√≠≈°e statistiku zpracov√°n√≠ volebn√≠ch dat vƒçetnƒõ
    doby zpracov√°n√≠ a volebn√≠ √∫ƒçasti.
    Funkce zpracuje p≈ôedan√© statistiky o volebn√≠ch v√Ωsledc√≠ch a
    vyp√≠≈°e souhrnn√© informace o dobƒõ zpracov√°n√≠, poƒçtu zpracovan√Ωch obc√≠,
    poƒçtu chyb, celkov√©m poƒçtu voliƒç≈Ø a platn√Ωch hlas≈Ø.
    D√°le vypoƒç√≠t√° pr≈Ømƒõrnou volebn√≠ √∫ƒçast na z√°kladƒõ celkov√©ho poƒçtu
    voliƒç≈Ø a platn√Ωch hlas≈Ø.
 
    Args:
        stats (dict): Slovn√≠k obsahuj√≠c√≠ statistiky zpracov√°n√≠ volebn√≠ch dat.
            Oƒçek√°van√© kl√≠ƒçe:
            - 'zpracovane_obce': int - poƒçet zpracovan√Ωch obc√≠
            - 'chyby': int - poƒçet chyb p≈ôi zpracov√°n√≠
            - 'celkem_volicu': int - celkov√Ω poƒçet voliƒç≈Ø
            - 'celkem_platnych_hlasu': int - celkov√Ω poƒçet platn√Ωch hlas≈Ø
        cas_zacatku (float): ƒåasov√° znaƒçka (epoch time) zaƒç√°tku zpracov√°n√≠.
                             Slou≈æ√≠ k v√Ωpoƒçtu doby zpracov√°n√≠.

    Returns:
        None: Funkce nevrac√≠ ≈æ√°dnou hodnotu p≈ôi √∫spƒõchu.

    Examples:
        >>> stats = {
        ...     'zpracovane_obce': 10,
        ...     'chyby': 0,
        ...     'celkem_volicu': 1000,
        ...     'celkem_platnych_hlasu': 800
        ... }
        >>> vypis_statistiky(stats, time.time() - 65)
        Souhrn zpracov√°n√≠:
        ------------------
        Doba zpracov√°n√≠: 1 minuta a 5 sekund
        Zpracov√°no obc√≠: 10
        Poƒçet chyb: 0
        Celkov√Ω poƒçet voliƒç≈Ø: 1,000
        Celkov√Ω poƒçet platn√Ωch hlas≈Ø: 800
        Pr≈Ømƒõrn√° volebn√≠ √∫ƒçast: 80.00%

    Notes:
        Funkce zobrazuje:
        - Doba zpracov√°n√≠ ve form√°tu "x minut(y) a y sekund(y)".
        - Poƒçet zpracovan√Ωch obc√≠.
        - Poƒçet chyb, kter√© nastaly p≈ôi zpracov√°n√≠.
        - Celkov√Ω poƒçet voliƒç≈Ø a platn√Ωch hlas≈Ø s form√°tov√°n√≠m ƒç√≠sel.
        - Vypoƒç√≠tanou pr≈Ømƒõrnou volebn√≠ √∫ƒçast jako procento.

    """
    # V√Ωpis statistik na konci
    cas_konce = time.time()
    celkovy_cas_zpracovani = cas_konce - cas_zacatku
    minuty = int(celkovy_cas_zpracovani // 60)
    sekundy = int(celkovy_cas_zpracovani % 60)

    cas_text = []
    if minuty > 0:
        cas_text.append(
            f"{minuty} " +
            ('minuta' if minuty == 1 else
            'minuty' if 1 < minuty < 5 else 'minut')
        )
    # P≈ôidej sekundy v≈ædy, kdy≈æ jsou > 0 nebo kdy≈æ nem√°me minuty
    if sekundy > 0 or not cas_text:
        cas_text.append(
            f"{sekundy} " +
            ('sekunda' if sekundy == 1 else
            'sekundy' if 1 < sekundy < 5 else 'sekund')
        )

    cas_string = " a ".join(cas_text)

    volebni_ucast = 0
    if stats['celkem_volicu'] > 0:
    
        volebni_ucast = (
            stats['celkem_platnych_hlasu']/stats['celkem_volicu']*100
        )
        
    print(
        Fore.LIGHTCYAN_EX + MSG_STATISTICS.format(
            time=cas_string,
            pocet=stats['zpracovane_obce'],
            chyby=stats['chyby'],
            volici=stats['celkem_volicu'],
            hlasy=stats['celkem_platnych_hlasu'],
            ucast=round(volebni_ucast, 2)
        )
    )


def zpracuj_data() -> None:
    """
    Hlavn√≠ funkce pro zpracov√°n√≠ volebn√≠ch dat. 
    ≈ò√≠d√≠ cel√Ω proces vƒçetnƒõ:
    - kontroly vstupn√≠ch argument≈Ø
    - z√≠sk√°n√≠ seznamu obc√≠
    - zpracov√°n√≠ dat jednotliv√Ωch obc√≠
    - ulo≈æen√≠ v√Ωsledk≈Ø do form√°tu CSV, JSON nebo XML
    - v√Ωpisu statistik zpracov√°n√≠
    Funkce automaticky zavol√° dal≈°√≠ podfunkce pro kontrolu 
    argument≈Ø, z√≠sk√°n√≠ dat z webu, jejich zpracov√°n√≠, 
    ulo≈æen√≠ do souboru a zobrazen√≠ souhrnn√Ωch statistik. 
    Pokud dojde k chybƒõ, bude vyps√°na chybov√° zpr√°va a 
    program se ukonƒç√≠ s p≈ô√≠slu≈°n√Ωm k√≥dem.

    Args:
        None: Funkce nevy≈æaduje ≈æ√°dn√© argumenty.

    Returns:
        None: Funkce nevrac√≠ ≈æ√°dnou hodnotu p≈ôi √∫spƒõchu.

    Raises:
        SystemExit: P≈ôi kritick√© chybƒõ bƒõhem zpracov√°n√≠
                    (nap≈ô. p≈ôi nespr√°vn√©m poƒçtu argument≈Ø, neplatn√° URL,
                    nenalezen√° data obc√≠, chyba p≈ôi parsov√°n√≠ dat).
       
        Exception: P≈ôi neoƒçek√°van√© chybƒõ bƒõhem procesu.
        
        NoDataFoundError: Specifick√° v√Ωjimka, kter√° je zaznamen√°na v logu,
                zpracov√°na a pot√© se ukonƒç√≠ program s chybov√Ωm hl√°≈°en√≠m.
        
        DataParsingError: Specifick√° v√Ωjimka, kter√° je zaznamen√°na v logu,
                zpracov√°na a pot√© se ukonƒç√≠ program s chybov√Ωm hl√°≈°en√≠m.
    Examples:
        python election_scraper.py "https://volby.cz/pls/..." "vysledky.csv"

    Notes:
        Tento skript oƒçek√°v√° dva argumenty p≈ô√≠kazov√© ≈ô√°dky:
        - URL adresa okresu obsahuj√≠c√≠ volebn√≠ data.
        - N√°zev v√Ωstupn√≠ho souboru (vƒçetnƒõ p≈ô√≠pony), do kter√©ho
          budou ulo≈æeny v√Ωsledky (CSV, JSON, XML).

        Po √∫spƒõ≈°n√©m proveden√≠ skript vyp√≠≈°e statistiky, vƒçetnƒõ:
        - doby zpracov√°n√≠,
        - poƒçtu zpracovan√Ωch obc√≠,
        - poƒçtu chyb,
        - celkov√©ho poƒçtu voliƒç≈Ø,
        - celkov√©ho poƒçtu platn√Ωch hlas≈Ø,
        - pr≈Ømƒõrn√© volebn√≠ √∫ƒçasti.
    """
    
    try:
        # P≈ôid√°me mƒõ≈ôen√≠ ƒçasu
        cas_zacatku = time.time()        
        
        # Kontrola vstupn√≠ch argument≈Ø
        url_okresu, vystupni_soubor = zkontroluj_vstupy()

        # Z√≠sk√°n√≠ seznamu obc√≠
        obce = ziskej_obce(url_okresu)

        # Zpracov√°n√≠ obc√≠
        vysledky, stats = zpracuj_obce(obce)

        # Ulo≈æen√≠ do CSV/JSON/XML souboru
        uloz_vysledky(vysledky, vystupni_soubor)

        # V√Ωpis statistik
        vypis_statistiky(stats, cas_zacatku)

    except SystemExit as e:
        # SystemExit je vyvol√°na na≈°imi funkcemi p≈ôi kritick√Ωch chyb√°ch
        logging.info(LOG_INFO_PROGRAM_EXIT.format(exit_code=e.code))
        pass #sys.exit() byl vyvol√°n d≈ô√≠ve
   
    except NoDataFoundError as e:
        # Zde zachyt√≠me NoDataFoundError vyvolanou v√Ω≈°e
        logging.error(LOG_ERROR_DATA_FAILED.format(error_detail=e))
        sys.exit(1)
        # Zde zachyt√≠me DataParsingError vyvolanou v√Ω≈°e
    
    except DataParsingError as e:
        logging.error(LOG_ERROR_PARSING_DATA.format(error_detail=e))
        sys.exit(1)
    
    except FileSavingError as e:
        # Zde zachyt√≠me FileSavingError vyvolanou v√Ω≈°e
        logging.error(LOG_ERROR_SAVING_FAILED, e)
        sys.exit(1)
    
    except UnsupportedFormatError as e:
        # Zde zachyt√≠me UnsupportedFormatError vyvolanou v√Ω≈°e
        logging.error(
            LOG_ERROR_UNSUPPORTED_FORMAT_FAILED.format(error_detail=e)
        )
        sys.exit(1)
    
    except Exception as e:
        logging.critical(
            LOG_CRITICAL.format(error_detail=e), exc_info=True
        )
        print("\n" + SEPARATOR)
        print(Fore.LIGHTYELLOW_EX + MSG_CRITICAL.format(error_detail=e))
        print(SEPARATOR + "\n")
        sys.exit(1)


if __name__ == "__main__":
    # Nastaven√≠ logov√°n√≠
    nastav_logovani(verbose = False, log_path='logs/volby_scraper.log')
    # Spu≈°tƒõn√≠ hlavn√≠ logiky
    zpracuj_data()

    




 

